#ifndef BLOCK_H
#define BLOCK_H

#include <QObject>

const int blockStateCount = 40;
const int blockCheckCount = 5;
const quint16 blockTable[blockStateCount][blockCheckCount] = {
    {0b0000000000, 0b0000100000, 0b0000110000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000011000, 0b0000110000, 0b0000000000 },
    {0b0000000000, 0b0000010000, 0b0000011000, 0b0000001000, 0b0000000000 },
    {0b0000000000, 0b0000011000, 0b0000110000, 0b0000000000, 0b0000000000 },

    {0b0000000000, 0b0000010000, 0b0000011000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000111000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000010000, 0b0000110000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000010000, 0b0000111000, 0b0000000000, 0b0000000000 },

    {0b0000000000, 0b0000000000, 0b0000110000, 0b0000110000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000110000, 0b0000110000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000110000, 0b0000110000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000110000, 0b0000110000, 0b0000000000 },

    {0b0000010000, 0b0000010000, 0b0000110000, 0b0000000000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0001110000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000011000, 0b0000010000, 0b0000010000 },
    {0b0000000000, 0b0000010000, 0b0000011100, 0b0000000000, 0b0000000000 },

    {0b0000010000, 0b0000010000, 0b0000010000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0001111000, 0b0000000000, 0b0000000000 },
    {0b0000000000, 0b0000010000, 0b0000010000, 0b0000010000, 0b0000010000 },
    {0b0000000000, 0b0000000000, 0b0000111100, 0b0000000000, 0b0000000000 },

    {0b0000000000, 0b0000001000, 0b0000011000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000110000, 0b0000011000, 0b0000000000, 0b0000000000 },
    {0b0000000000, 0b0000010000, 0b0000110000, 0b0000100000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000110000, 0b0000011000, 0b0000000000 },

    {0b0000000000, 0b0000000000, 0b0000110000, 0b0000110000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000110000, 0b0000110000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000110000, 0b0000110000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000110000, 0b0000110000, 0b0000000000 },

    {0b0000000000, 0b0000010000, 0b0000110000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000111000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000010000, 0b0000011000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000010000, 0b0000111000, 0b0000000000, 0b0000000000 },

    {0b0000010000, 0b0000010000, 0b0000011000, 0b0000000000, 0b0000000000 },
    {0b0000000000, 0b0000010000, 0b0001110000, 0b0000000000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0000110000, 0b0000010000, 0b0000010000 },
    {0b0000000000, 0b0000000000, 0b0000011100, 0b0000010000, 0b0000000000 },

    {0b0000000000, 0b0000010000, 0b0000010000, 0b0000010000, 0b0000010000 },
    {0b0000000000, 0b0000000000, 0b0000111100, 0b0000000000, 0b0000000000 },
    {0b0000010000, 0b0000010000, 0b0000010000, 0b0000010000, 0b0000000000 },
    {0b0000000000, 0b0000000000, 0b0001111000, 0b0000000000, 0b0000000000 }
};

struct BlockPosion
{
    int x;
    int y;
    int state;
};

class ActiveBlock
{
public:
    ActiveBlock();
    ~ActiveBlock();
    void init();
    void updateNewBlock(int state);
    bool blockDown();
    void blockLeft();
    void blockRight();
    void blockRevolve();
    quint16* blockValue();
    void updateLimit(quint16* limitTable);
    void printValue();
private:
    void updateBlockValue();
    bool checkPostion(int x, int y, int state);
private:
    quint16* mp_blockValue;
    quint16* mp_limitValue;
    BlockPosion m_pos;
};

class StaticBlock
{
public:
    StaticBlock();
    ~StaticBlock();
    void init();
    quint16* blockValue();
    bool appendBlock(quint16* blockValue);
    int point();
    static void mixBlockTable(quint16* srcTable, quint16* actTable, quint16* staTable);
private:
    quint16* mp_blockValue;
    int m_point;
};



#endif // BLOCK_H
